### YamlMime:ManagedReference
items:
- uid: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1
  commentId: T:SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1
  id: TapestryEvent`1
  parent: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry
  children:
  - SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1.GetInvocationCount
  - SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1.Invoke(`0)
  - SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1.RemoveOneShotMethod(System.Action{`0})
  - SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1.RemoveRepeatingMethod(System.Action{`0})
  - SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1.SubscribeMethod(System.Action{`0},System.Boolean)
  langs:
  - csharp
  - vb
  name: TapestryEvent<T>
  nameWithType: TapestryEvent<T>
  fullName: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent<T>
  type: Class
  source:
    remote:
      path: Patterns/Behavioural/Observer/StaticRegistry/TapestryEvent.cs
      branch: main
      repo: https://github.com/manuelfalonso/Unity-Scripts.git
    id: TapestryEvent
    path: ../Assets/Sombra Studios/Shared/Patterns/Behavioural/Observer/StaticRegistry/TapestryEvent.cs
    startLine: 79
  assemblies:
  - SombraStudios.Shared.Patterns
  namespace: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry
  summary: Represents an event with a single parameter.
  example: []
  syntax:
    content: public class TapestryEvent<T>
    typeParameters:
    - id: T
    content.vb: Public Class TapestryEvent(Of T)
  inheritance:
  - System.Object
  nameWithType.vb: TapestryEvent(Of T)
  fullName.vb: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent(Of T)
  name.vb: TapestryEvent(Of T)
- uid: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1.Invoke(`0)
  commentId: M:SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1.Invoke(`0)
  id: Invoke(`0)
  parent: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1
  langs:
  - csharp
  - vb
  name: Invoke(T)
  nameWithType: TapestryEvent<T>.Invoke(T)
  fullName: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent<T>.Invoke(T)
  type: Method
  source:
    remote:
      path: Patterns/Behavioural/Observer/StaticRegistry/TapestryEvent.cs
      branch: main
      repo: https://github.com/manuelfalonso/Unity-Scripts.git
    id: Invoke
    path: ../Assets/Sombra Studios/Shared/Patterns/Behavioural/Observer/StaticRegistry/TapestryEvent.cs
    startLine: 88
  assemblies:
  - SombraStudios.Shared.Patterns
  namespace: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry
  summary: Invokes the event, triggering all subscribed methods.
  example: []
  syntax:
    content: public void Invoke(T inParams)
    parameters:
    - id: inParams
      type: '{T}'
    content.vb: Public Sub Invoke(inParams As T)
  overload: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1.Invoke*
  nameWithType.vb: TapestryEvent(Of T).Invoke(T)
  fullName.vb: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent(Of T).Invoke(T)
- uid: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1.SubscribeMethod(System.Action{`0},System.Boolean)
  commentId: M:SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1.SubscribeMethod(System.Action{`0},System.Boolean)
  id: SubscribeMethod(System.Action{`0},System.Boolean)
  parent: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1
  langs:
  - csharp
  - vb
  name: SubscribeMethod(Action<T>, bool)
  nameWithType: TapestryEvent<T>.SubscribeMethod(Action<T>, bool)
  fullName: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent<T>.SubscribeMethod(System.Action<T>, bool)
  type: Method
  source:
    remote:
      path: Patterns/Behavioural/Observer/StaticRegistry/TapestryEvent.cs
      branch: main
      repo: https://github.com/manuelfalonso/Unity-Scripts.git
    id: SubscribeMethod
    path: ../Assets/Sombra Studios/Shared/Patterns/Behavioural/Observer/StaticRegistry/TapestryEvent.cs
    startLine: 106
  assemblies:
  - SombraStudios.Shared.Patterns
  namespace: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry
  summary: Subscribes a method to the event.
  example: []
  syntax:
    content: public void SubscribeMethod(Action<T> inAction, bool isSingleUse = false)
    parameters:
    - id: inAction
      type: System.Action{{T}}
      description: The method to subscribe.
    - id: isSingleUse
      type: System.Boolean
      description: Whether the subscription is for a single use.
    content.vb: Public Sub SubscribeMethod(inAction As Action(Of T), isSingleUse As Boolean = False)
  overload: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1.SubscribeMethod*
  nameWithType.vb: TapestryEvent(Of T).SubscribeMethod(Action(Of T), Boolean)
  fullName.vb: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent(Of T).SubscribeMethod(System.Action(Of T), Boolean)
  name.vb: SubscribeMethod(Action(Of T), Boolean)
- uid: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1.RemoveRepeatingMethod(System.Action{`0})
  commentId: M:SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1.RemoveRepeatingMethod(System.Action{`0})
  id: RemoveRepeatingMethod(System.Action{`0})
  parent: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1
  langs:
  - csharp
  - vb
  name: RemoveRepeatingMethod(Action<T>)
  nameWithType: TapestryEvent<T>.RemoveRepeatingMethod(Action<T>)
  fullName: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent<T>.RemoveRepeatingMethod(System.Action<T>)
  type: Method
  source:
    remote:
      path: Patterns/Behavioural/Observer/StaticRegistry/TapestryEvent.cs
      branch: main
      repo: https://github.com/manuelfalonso/Unity-Scripts.git
    id: RemoveRepeatingMethod
    path: ../Assets/Sombra Studios/Shared/Patterns/Behavioural/Observer/StaticRegistry/TapestryEvent.cs
    startLine: 122
  assemblies:
  - SombraStudios.Shared.Patterns
  namespace: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry
  summary: Removes a repeating method from the event's subscriptions.
  example: []
  syntax:
    content: public void RemoveRepeatingMethod(Action<T> inAction)
    parameters:
    - id: inAction
      type: System.Action{{T}}
      description: The method to remove.
    content.vb: Public Sub RemoveRepeatingMethod(inAction As Action(Of T))
  overload: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1.RemoveRepeatingMethod*
  nameWithType.vb: TapestryEvent(Of T).RemoveRepeatingMethod(Action(Of T))
  fullName.vb: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent(Of T).RemoveRepeatingMethod(System.Action(Of T))
  name.vb: RemoveRepeatingMethod(Action(Of T))
- uid: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1.RemoveOneShotMethod(System.Action{`0})
  commentId: M:SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1.RemoveOneShotMethod(System.Action{`0})
  id: RemoveOneShotMethod(System.Action{`0})
  parent: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1
  langs:
  - csharp
  - vb
  name: RemoveOneShotMethod(Action<T>)
  nameWithType: TapestryEvent<T>.RemoveOneShotMethod(Action<T>)
  fullName: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent<T>.RemoveOneShotMethod(System.Action<T>)
  type: Method
  source:
    remote:
      path: Patterns/Behavioural/Observer/StaticRegistry/TapestryEvent.cs
      branch: main
      repo: https://github.com/manuelfalonso/Unity-Scripts.git
    id: RemoveOneShotMethod
    path: ../Assets/Sombra Studios/Shared/Patterns/Behavioural/Observer/StaticRegistry/TapestryEvent.cs
    startLine: 131
  assemblies:
  - SombraStudios.Shared.Patterns
  namespace: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry
  summary: Removes a one-shot method from the event's subscriptions.
  example: []
  syntax:
    content: public void RemoveOneShotMethod(Action<T> inAction)
    parameters:
    - id: inAction
      type: System.Action{{T}}
      description: The method to remove.
    content.vb: Public Sub RemoveOneShotMethod(inAction As Action(Of T))
  overload: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1.RemoveOneShotMethod*
  nameWithType.vb: TapestryEvent(Of T).RemoveOneShotMethod(Action(Of T))
  fullName.vb: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent(Of T).RemoveOneShotMethod(System.Action(Of T))
  name.vb: RemoveOneShotMethod(Action(Of T))
- uid: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1.GetInvocationCount
  commentId: M:SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1.GetInvocationCount
  id: GetInvocationCount
  parent: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1
  langs:
  - csharp
  - vb
  name: GetInvocationCount()
  nameWithType: TapestryEvent<T>.GetInvocationCount()
  fullName: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent<T>.GetInvocationCount()
  type: Method
  source:
    remote:
      path: Patterns/Behavioural/Observer/StaticRegistry/TapestryEvent.cs
      branch: main
      repo: https://github.com/manuelfalonso/Unity-Scripts.git
    id: GetInvocationCount
    path: ../Assets/Sombra Studios/Shared/Patterns/Behavioural/Observer/StaticRegistry/TapestryEvent.cs
    startLine: 140
  assemblies:
  - SombraStudios.Shared.Patterns
  namespace: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry
  summary: Gets the total count of subscribed methods for this event.
  example: []
  syntax:
    content: public int GetInvocationCount()
    return:
      type: System.Int32
      description: The total count of subscribed methods.
    content.vb: Public Function GetInvocationCount() As Integer
  overload: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1.GetInvocationCount*
  nameWithType.vb: TapestryEvent(Of T).GetInvocationCount()
  fullName.vb: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent(Of T).GetInvocationCount()
references:
- uid: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry
  commentId: N:SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry
  href: SombraStudios.html
  name: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry
  nameWithType: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry
  fullName: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry
  spec.csharp:
  - uid: SombraStudios
    name: SombraStudios
    href: SombraStudios.html
  - name: .
  - uid: SombraStudios.Shared
    name: Shared
    href: SombraStudios.Shared.html
  - name: .
  - uid: SombraStudios.Shared.Patterns
    name: Patterns
    href: SombraStudios.Shared.Patterns.html
  - name: .
  - uid: SombraStudios.Shared.Patterns.Behavioural
    name: Behavioural
    href: SombraStudios.Shared.Patterns.Behavioural.html
  - name: .
  - uid: SombraStudios.Shared.Patterns.Behavioural.Observer
    name: Observer
    href: SombraStudios.Shared.Patterns.Behavioural.Observer.html
  - name: .
  - uid: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry
    name: StaticRegistry
    href: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.html
  spec.vb:
  - uid: SombraStudios
    name: SombraStudios
    href: SombraStudios.html
  - name: .
  - uid: SombraStudios.Shared
    name: Shared
    href: SombraStudios.Shared.html
  - name: .
  - uid: SombraStudios.Shared.Patterns
    name: Patterns
    href: SombraStudios.Shared.Patterns.html
  - name: .
  - uid: SombraStudios.Shared.Patterns.Behavioural
    name: Behavioural
    href: SombraStudios.Shared.Patterns.Behavioural.html
  - name: .
  - uid: SombraStudios.Shared.Patterns.Behavioural.Observer
    name: Observer
    href: SombraStudios.Shared.Patterns.Behavioural.Observer.html
  - name: .
  - uid: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry
    name: StaticRegistry
    href: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1.Invoke*
  commentId: Overload:SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1.Invoke
  href: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent-1.html#SombraStudios_Shared_Patterns_Behavioural_Observer_StaticRegistry_TapestryEvent_1_Invoke__0_
  name: Invoke
  nameWithType: TapestryEvent<T>.Invoke
  fullName: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent<T>.Invoke
  nameWithType.vb: TapestryEvent(Of T).Invoke
  fullName.vb: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent(Of T).Invoke
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1.SubscribeMethod*
  commentId: Overload:SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1.SubscribeMethod
  href: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent-1.html#SombraStudios_Shared_Patterns_Behavioural_Observer_StaticRegistry_TapestryEvent_1_SubscribeMethod_System_Action__0__System_Boolean_
  name: SubscribeMethod
  nameWithType: TapestryEvent<T>.SubscribeMethod
  fullName: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent<T>.SubscribeMethod
  nameWithType.vb: TapestryEvent(Of T).SubscribeMethod
  fullName.vb: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent(Of T).SubscribeMethod
- uid: System.Action{{T}}
  commentId: T:System.Action{`0}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1.RemoveRepeatingMethod*
  commentId: Overload:SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1.RemoveRepeatingMethod
  href: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent-1.html#SombraStudios_Shared_Patterns_Behavioural_Observer_StaticRegistry_TapestryEvent_1_RemoveRepeatingMethod_System_Action__0__
  name: RemoveRepeatingMethod
  nameWithType: TapestryEvent<T>.RemoveRepeatingMethod
  fullName: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent<T>.RemoveRepeatingMethod
  nameWithType.vb: TapestryEvent(Of T).RemoveRepeatingMethod
  fullName.vb: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent(Of T).RemoveRepeatingMethod
- uid: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1.RemoveOneShotMethod*
  commentId: Overload:SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1.RemoveOneShotMethod
  href: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent-1.html#SombraStudios_Shared_Patterns_Behavioural_Observer_StaticRegistry_TapestryEvent_1_RemoveOneShotMethod_System_Action__0__
  name: RemoveOneShotMethod
  nameWithType: TapestryEvent<T>.RemoveOneShotMethod
  fullName: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent<T>.RemoveOneShotMethod
  nameWithType.vb: TapestryEvent(Of T).RemoveOneShotMethod
  fullName.vb: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent(Of T).RemoveOneShotMethod
- uid: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1.GetInvocationCount*
  commentId: Overload:SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent`1.GetInvocationCount
  href: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent-1.html#SombraStudios_Shared_Patterns_Behavioural_Observer_StaticRegistry_TapestryEvent_1_GetInvocationCount
  name: GetInvocationCount
  nameWithType: TapestryEvent<T>.GetInvocationCount
  fullName: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent<T>.GetInvocationCount
  nameWithType.vb: TapestryEvent(Of T).GetInvocationCount
  fullName.vb: SombraStudios.Shared.Patterns.Behavioural.Observer.StaticRegistry.TapestryEvent(Of T).GetInvocationCount
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
