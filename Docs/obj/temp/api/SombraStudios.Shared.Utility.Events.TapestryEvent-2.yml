### YamlMime:ManagedReference
items:
- uid: SombraStudios.Shared.Utility.Events.TapestryEvent`2
  commentId: T:SombraStudios.Shared.Utility.Events.TapestryEvent`2
  id: TapestryEvent`2
  parent: SombraStudios.Shared.Utility.Events
  children:
  - SombraStudios.Shared.Utility.Events.TapestryEvent`2.GetInvocationCount
  - SombraStudios.Shared.Utility.Events.TapestryEvent`2.Invoke(`0,`1)
  - SombraStudios.Shared.Utility.Events.TapestryEvent`2.RemoveOneShotMethod(System.Action{`0,`1})
  - SombraStudios.Shared.Utility.Events.TapestryEvent`2.RemoveRepeatingMethod(System.Action{`0,`1})
  - SombraStudios.Shared.Utility.Events.TapestryEvent`2.SubscribeMethod(System.Action{`0,`1},System.Boolean)
  langs:
  - csharp
  - vb
  name: TapestryEvent<T1, T2>
  nameWithType: TapestryEvent<T1, T2>
  fullName: SombraStudios.Shared.Utility.Events.TapestryEvent<T1, T2>
  type: Class
  source:
    remote:
      path: Utility/Events/StaticRegistry/TapestryEvent.cs
      branch: main
      repo: https://github.com/manuelfalonso/Unity-Scripts.git
    id: TapestryEvent
    path: ../Assets/Sombra Studios/Shared/Utility/Events/StaticRegistry/TapestryEvent.cs
    startLine: 104
  assemblies:
  - SombraStudios.Shared
  namespace: SombraStudios.Shared.Utility.Events
  syntax:
    content: public class TapestryEvent<T1, T2>
    typeParameters:
    - id: T1
    - id: T2
    content.vb: Public Class TapestryEvent(Of T1, T2)
  inheritance:
  - System.Object
  nameWithType.vb: TapestryEvent(Of T1, T2)
  fullName.vb: SombraStudios.Shared.Utility.Events.TapestryEvent(Of T1, T2)
  name.vb: TapestryEvent(Of T1, T2)
- uid: SombraStudios.Shared.Utility.Events.TapestryEvent`2.Invoke(`0,`1)
  commentId: M:SombraStudios.Shared.Utility.Events.TapestryEvent`2.Invoke(`0,`1)
  id: Invoke(`0,`1)
  parent: SombraStudios.Shared.Utility.Events.TapestryEvent`2
  langs:
  - csharp
  - vb
  name: Invoke(T1, T2)
  nameWithType: TapestryEvent<T1, T2>.Invoke(T1, T2)
  fullName: SombraStudios.Shared.Utility.Events.TapestryEvent<T1, T2>.Invoke(T1, T2)
  type: Method
  source:
    remote:
      path: Utility/Events/StaticRegistry/TapestryEvent.cs
      branch: main
      repo: https://github.com/manuelfalonso/Unity-Scripts.git
    id: Invoke
    path: ../Assets/Sombra Studios/Shared/Utility/Events/StaticRegistry/TapestryEvent.cs
    startLine: 109
  assemblies:
  - SombraStudios.Shared
  namespace: SombraStudios.Shared.Utility.Events
  syntax:
    content: public void Invoke(T1 inParams1, T2 inParams2)
    parameters:
    - id: inParams1
      type: '{T1}'
    - id: inParams2
      type: '{T2}'
    content.vb: Public Sub Invoke(inParams1 As T1, inParams2 As T2)
  overload: SombraStudios.Shared.Utility.Events.TapestryEvent`2.Invoke*
  nameWithType.vb: TapestryEvent(Of T1, T2).Invoke(T1, T2)
  fullName.vb: SombraStudios.Shared.Utility.Events.TapestryEvent(Of T1, T2).Invoke(T1, T2)
- uid: SombraStudios.Shared.Utility.Events.TapestryEvent`2.SubscribeMethod(System.Action{`0,`1},System.Boolean)
  commentId: M:SombraStudios.Shared.Utility.Events.TapestryEvent`2.SubscribeMethod(System.Action{`0,`1},System.Boolean)
  id: SubscribeMethod(System.Action{`0,`1},System.Boolean)
  parent: SombraStudios.Shared.Utility.Events.TapestryEvent`2
  langs:
  - csharp
  - vb
  name: SubscribeMethod(Action<T1, T2>, bool)
  nameWithType: TapestryEvent<T1, T2>.SubscribeMethod(Action<T1, T2>, bool)
  fullName: SombraStudios.Shared.Utility.Events.TapestryEvent<T1, T2>.SubscribeMethod(System.Action<T1, T2>, bool)
  type: Method
  source:
    remote:
      path: Utility/Events/StaticRegistry/TapestryEvent.cs
      branch: main
      repo: https://github.com/manuelfalonso/Unity-Scripts.git
    id: SubscribeMethod
    path: ../Assets/Sombra Studios/Shared/Utility/Events/StaticRegistry/TapestryEvent.cs
    startLine: 122
  assemblies:
  - SombraStudios.Shared
  namespace: SombraStudios.Shared.Utility.Events
  syntax:
    content: public void SubscribeMethod(Action<T1, T2> inAction, bool isSingleUse)
    parameters:
    - id: inAction
      type: System.Action{{T1},{T2}}
    - id: isSingleUse
      type: System.Boolean
    content.vb: Public Sub SubscribeMethod(inAction As Action(Of T1, T2), isSingleUse As Boolean)
  overload: SombraStudios.Shared.Utility.Events.TapestryEvent`2.SubscribeMethod*
  nameWithType.vb: TapestryEvent(Of T1, T2).SubscribeMethod(Action(Of T1, T2), Boolean)
  fullName.vb: SombraStudios.Shared.Utility.Events.TapestryEvent(Of T1, T2).SubscribeMethod(System.Action(Of T1, T2), Boolean)
  name.vb: SubscribeMethod(Action(Of T1, T2), Boolean)
- uid: SombraStudios.Shared.Utility.Events.TapestryEvent`2.RemoveRepeatingMethod(System.Action{`0,`1})
  commentId: M:SombraStudios.Shared.Utility.Events.TapestryEvent`2.RemoveRepeatingMethod(System.Action{`0,`1})
  id: RemoveRepeatingMethod(System.Action{`0,`1})
  parent: SombraStudios.Shared.Utility.Events.TapestryEvent`2
  langs:
  - csharp
  - vb
  name: RemoveRepeatingMethod(Action<T1, T2>)
  nameWithType: TapestryEvent<T1, T2>.RemoveRepeatingMethod(Action<T1, T2>)
  fullName: SombraStudios.Shared.Utility.Events.TapestryEvent<T1, T2>.RemoveRepeatingMethod(System.Action<T1, T2>)
  type: Method
  source:
    remote:
      path: Utility/Events/StaticRegistry/TapestryEvent.cs
      branch: main
      repo: https://github.com/manuelfalonso/Unity-Scripts.git
    id: RemoveRepeatingMethod
    path: ../Assets/Sombra Studios/Shared/Utility/Events/StaticRegistry/TapestryEvent.cs
    startLine: 136
  assemblies:
  - SombraStudios.Shared
  namespace: SombraStudios.Shared.Utility.Events
  syntax:
    content: public void RemoveRepeatingMethod(Action<T1, T2> inAction)
    parameters:
    - id: inAction
      type: System.Action{{T1},{T2}}
    content.vb: Public Sub RemoveRepeatingMethod(inAction As Action(Of T1, T2))
  overload: SombraStudios.Shared.Utility.Events.TapestryEvent`2.RemoveRepeatingMethod*
  nameWithType.vb: TapestryEvent(Of T1, T2).RemoveRepeatingMethod(Action(Of T1, T2))
  fullName.vb: SombraStudios.Shared.Utility.Events.TapestryEvent(Of T1, T2).RemoveRepeatingMethod(System.Action(Of T1, T2))
  name.vb: RemoveRepeatingMethod(Action(Of T1, T2))
- uid: SombraStudios.Shared.Utility.Events.TapestryEvent`2.RemoveOneShotMethod(System.Action{`0,`1})
  commentId: M:SombraStudios.Shared.Utility.Events.TapestryEvent`2.RemoveOneShotMethod(System.Action{`0,`1})
  id: RemoveOneShotMethod(System.Action{`0,`1})
  parent: SombraStudios.Shared.Utility.Events.TapestryEvent`2
  langs:
  - csharp
  - vb
  name: RemoveOneShotMethod(Action<T1, T2>)
  nameWithType: TapestryEvent<T1, T2>.RemoveOneShotMethod(Action<T1, T2>)
  fullName: SombraStudios.Shared.Utility.Events.TapestryEvent<T1, T2>.RemoveOneShotMethod(System.Action<T1, T2>)
  type: Method
  source:
    remote:
      path: Utility/Events/StaticRegistry/TapestryEvent.cs
      branch: main
      repo: https://github.com/manuelfalonso/Unity-Scripts.git
    id: RemoveOneShotMethod
    path: ../Assets/Sombra Studios/Shared/Utility/Events/StaticRegistry/TapestryEvent.cs
    startLine: 141
  assemblies:
  - SombraStudios.Shared
  namespace: SombraStudios.Shared.Utility.Events
  syntax:
    content: public void RemoveOneShotMethod(Action<T1, T2> inAction)
    parameters:
    - id: inAction
      type: System.Action{{T1},{T2}}
    content.vb: Public Sub RemoveOneShotMethod(inAction As Action(Of T1, T2))
  overload: SombraStudios.Shared.Utility.Events.TapestryEvent`2.RemoveOneShotMethod*
  nameWithType.vb: TapestryEvent(Of T1, T2).RemoveOneShotMethod(Action(Of T1, T2))
  fullName.vb: SombraStudios.Shared.Utility.Events.TapestryEvent(Of T1, T2).RemoveOneShotMethod(System.Action(Of T1, T2))
  name.vb: RemoveOneShotMethod(Action(Of T1, T2))
- uid: SombraStudios.Shared.Utility.Events.TapestryEvent`2.GetInvocationCount
  commentId: M:SombraStudios.Shared.Utility.Events.TapestryEvent`2.GetInvocationCount
  id: GetInvocationCount
  parent: SombraStudios.Shared.Utility.Events.TapestryEvent`2
  langs:
  - csharp
  - vb
  name: GetInvocationCount()
  nameWithType: TapestryEvent<T1, T2>.GetInvocationCount()
  fullName: SombraStudios.Shared.Utility.Events.TapestryEvent<T1, T2>.GetInvocationCount()
  type: Method
  source:
    remote:
      path: Utility/Events/StaticRegistry/TapestryEvent.cs
      branch: main
      repo: https://github.com/manuelfalonso/Unity-Scripts.git
    id: GetInvocationCount
    path: ../Assets/Sombra Studios/Shared/Utility/Events/StaticRegistry/TapestryEvent.cs
    startLine: 146
  assemblies:
  - SombraStudios.Shared
  namespace: SombraStudios.Shared.Utility.Events
  syntax:
    content: public int GetInvocationCount()
    return:
      type: System.Int32
    content.vb: Public Function GetInvocationCount() As Integer
  overload: SombraStudios.Shared.Utility.Events.TapestryEvent`2.GetInvocationCount*
  nameWithType.vb: TapestryEvent(Of T1, T2).GetInvocationCount()
  fullName.vb: SombraStudios.Shared.Utility.Events.TapestryEvent(Of T1, T2).GetInvocationCount()
references:
- uid: SombraStudios.Shared.Utility.Events
  commentId: N:SombraStudios.Shared.Utility.Events
  href: SombraStudios.html
  name: SombraStudios.Shared.Utility.Events
  nameWithType: SombraStudios.Shared.Utility.Events
  fullName: SombraStudios.Shared.Utility.Events
  spec.csharp:
  - uid: SombraStudios
    name: SombraStudios
    href: SombraStudios.html
  - name: .
  - uid: SombraStudios.Shared
    name: Shared
    href: SombraStudios.Shared.html
  - name: .
  - uid: SombraStudios.Shared.Utility
    name: Utility
    href: SombraStudios.Shared.Utility.html
  - name: .
  - uid: SombraStudios.Shared.Utility.Events
    name: Events
    href: SombraStudios.Shared.Utility.Events.html
  spec.vb:
  - uid: SombraStudios
    name: SombraStudios
    href: SombraStudios.html
  - name: .
  - uid: SombraStudios.Shared
    name: Shared
    href: SombraStudios.Shared.html
  - name: .
  - uid: SombraStudios.Shared.Utility
    name: Utility
    href: SombraStudios.Shared.Utility.html
  - name: .
  - uid: SombraStudios.Shared.Utility.Events
    name: Events
    href: SombraStudios.Shared.Utility.Events.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: SombraStudios.Shared.Utility.Events.TapestryEvent`2.Invoke*
  commentId: Overload:SombraStudios.Shared.Utility.Events.TapestryEvent`2.Invoke
  href: SombraStudios.Shared.Utility.Events.TapestryEvent-2.html#SombraStudios_Shared_Utility_Events_TapestryEvent_2_Invoke__0__1_
  name: Invoke
  nameWithType: TapestryEvent<T1, T2>.Invoke
  fullName: SombraStudios.Shared.Utility.Events.TapestryEvent<T1, T2>.Invoke
  nameWithType.vb: TapestryEvent(Of T1, T2).Invoke
  fullName.vb: SombraStudios.Shared.Utility.Events.TapestryEvent(Of T1, T2).Invoke
- uid: '{T1}'
  commentId: '!:T1'
  definition: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: '{T2}'
  commentId: '!:T2'
  definition: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: SombraStudios.Shared.Utility.Events.TapestryEvent`2.SubscribeMethod*
  commentId: Overload:SombraStudios.Shared.Utility.Events.TapestryEvent`2.SubscribeMethod
  href: SombraStudios.Shared.Utility.Events.TapestryEvent-2.html#SombraStudios_Shared_Utility_Events_TapestryEvent_2_SubscribeMethod_System_Action__0__1__System_Boolean_
  name: SubscribeMethod
  nameWithType: TapestryEvent<T1, T2>.SubscribeMethod
  fullName: SombraStudios.Shared.Utility.Events.TapestryEvent<T1, T2>.SubscribeMethod
  nameWithType.vb: TapestryEvent(Of T1, T2).SubscribeMethod
  fullName.vb: SombraStudios.Shared.Utility.Events.TapestryEvent(Of T1, T2).SubscribeMethod
- uid: System.Action{{T1},{T2}}
  commentId: T:System.Action{`0,`1}
  parent: System
  definition: System.Action`2
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: SombraStudios.Shared.Utility.Events.TapestryEvent`2.RemoveRepeatingMethod*
  commentId: Overload:SombraStudios.Shared.Utility.Events.TapestryEvent`2.RemoveRepeatingMethod
  href: SombraStudios.Shared.Utility.Events.TapestryEvent-2.html#SombraStudios_Shared_Utility_Events_TapestryEvent_2_RemoveRepeatingMethod_System_Action__0__1__
  name: RemoveRepeatingMethod
  nameWithType: TapestryEvent<T1, T2>.RemoveRepeatingMethod
  fullName: SombraStudios.Shared.Utility.Events.TapestryEvent<T1, T2>.RemoveRepeatingMethod
  nameWithType.vb: TapestryEvent(Of T1, T2).RemoveRepeatingMethod
  fullName.vb: SombraStudios.Shared.Utility.Events.TapestryEvent(Of T1, T2).RemoveRepeatingMethod
- uid: SombraStudios.Shared.Utility.Events.TapestryEvent`2.RemoveOneShotMethod*
  commentId: Overload:SombraStudios.Shared.Utility.Events.TapestryEvent`2.RemoveOneShotMethod
  href: SombraStudios.Shared.Utility.Events.TapestryEvent-2.html#SombraStudios_Shared_Utility_Events_TapestryEvent_2_RemoveOneShotMethod_System_Action__0__1__
  name: RemoveOneShotMethod
  nameWithType: TapestryEvent<T1, T2>.RemoveOneShotMethod
  fullName: SombraStudios.Shared.Utility.Events.TapestryEvent<T1, T2>.RemoveOneShotMethod
  nameWithType.vb: TapestryEvent(Of T1, T2).RemoveOneShotMethod
  fullName.vb: SombraStudios.Shared.Utility.Events.TapestryEvent(Of T1, T2).RemoveOneShotMethod
- uid: SombraStudios.Shared.Utility.Events.TapestryEvent`2.GetInvocationCount*
  commentId: Overload:SombraStudios.Shared.Utility.Events.TapestryEvent`2.GetInvocationCount
  href: SombraStudios.Shared.Utility.Events.TapestryEvent-2.html#SombraStudios_Shared_Utility_Events_TapestryEvent_2_GetInvocationCount
  name: GetInvocationCount
  nameWithType: TapestryEvent<T1, T2>.GetInvocationCount
  fullName: SombraStudios.Shared.Utility.Events.TapestryEvent<T1, T2>.GetInvocationCount
  nameWithType.vb: TapestryEvent(Of T1, T2).GetInvocationCount
  fullName.vb: SombraStudios.Shared.Utility.Events.TapestryEvent(Of T1, T2).GetInvocationCount
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
